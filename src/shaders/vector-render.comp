#version 450 core

#define LINE_WIDTH 0.005

struct Edge {
    vec3 start;
    vec3 end;
    vec3 color;
    int modelNumber;
};

layout(std140, binding = 0) uniform Scene {
    mat4  view;
    mat4  projection;
    vec3  cameraPosition;
} sb;

layout(std430, binding = 2) readonly buffer Edges {
    Edge edges[];
};

layout (rgba32f, binding = 3) uniform image2D outputImage;

float closestT(vec2 p0, vec2 p1, vec2 p) {

    float dx = p0.x - p1.x;
    float dy = p0.y - p1.y;

    float num   = dx*(p0.x - p.x) + dy*(p0.y - p.y);
    float denom = dx*dx + dy*dy;

    return clamp(num / denom, 0.0, 1.0);
}

vec3 lerp(vec3 p0, vec3 p1, float t) {
    return (1.0 - t)*p0 + t*p1;
}

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outputImage);

    if (pixelCoords.x >= size.x || pixelCoords.y >= size.y) {
        return;
    }

    vec2 point = vec2(pixelCoords) / vec2(size) * 2.0 - 1.0;

    for(int i = 0; i < edges.length(); i++) {

        float minx = min(edges[i].start.x, edges[i].end.x);

        if (point.x < minx - LINE_WIDTH) {
            continue;
        }

        float miny = min(edges[i].start.y, edges[i].end.y);

        if (point.y < miny - LINE_WIDTH) {
            continue;
        }

        float maxx = max(edges[i].start.x, edges[i].end.x);

        if (point.x > maxx + LINE_WIDTH) {
            continue;
        }

        float maxy = max(edges[i].start.y, edges[i].end.y);

        if (point.y > maxy + LINE_WIDTH) {
            continue;
        }

        if (edges[i].start.z < 0.0 || edges[i].start.z > 1.0) {
            continue;
        }

        if (edges[i].end.z < 0.0 || edges[i].end.z > 1.0) {
            continue;
        }

        float t = closestT(edges[i].start.xy, edges[i].end.xy, point);
        vec3 c = lerp(edges[i].start, edges[i].end, t);
        vec2 d = c.xy - point;

        float dist = d.x*d.x + d.y*d.y;

        if (dist < LINE_WIDTH*LINE_WIDTH) {
            vec4 color = vec4(edges[i].color, 1.0);
            vec4 srcColor = imageLoad(outputImage, pixelCoords);

            vec4 newColor = (1 - color.a) * srcColor + color;

            imageStore(outputImage, pixelCoords, newColor);
            return;
        }
    }
}